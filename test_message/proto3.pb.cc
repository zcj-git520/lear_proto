// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto3.proto

#include "proto3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace main {
PROTOBUF_CONSTEXPR TestMessage_TeChild::TestMessage_TeChild(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ch_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ch_sex_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestMessage_TeChildDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMessage_TeChildDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMessage_TeChildDefaultTypeInternal() {}
  union {
    TestMessage_TeChild _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessage_TeChildDefaultTypeInternal _TestMessage_TeChild_default_instance_;
PROTOBUF_CONSTEXPR TestMessage_TeMapEntry_DoNotUse::TestMessage_TeMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestMessage_TeMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMessage_TeMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMessage_TeMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMessage_TeMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessage_TeMapEntry_DoNotUseDefaultTypeInternal _TestMessage_TeMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMessage::TestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.te_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.te_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.te_char_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.childs_)*/nullptr
  , /*decltype(_impl_.te_age_)*/0
  , /*decltype(_impl_.te_count_)*/0
  , /*decltype(_impl_.te_money_)*/0
  , /*decltype(_impl_.te_score_)*/0
  , /*decltype(_impl_.te_fat_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMessageDefaultTypeInternal() {}
  union {
    TestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessageDefaultTypeInternal _TestMessage_default_instance_;
}  // namespace main
static ::_pb::Metadata file_level_metadata_proto3_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proto3_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto3_2eproto = nullptr;

const uint32_t TableStruct_proto3_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::main::TestMessage_TeChild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::main::TestMessage_TeChild, _impl_.ch_name_),
  PROTOBUF_FIELD_OFFSET(::main::TestMessage_TeChild, _impl_.ch_sex_),
  PROTOBUF_FIELD_OFFSET(::main::TestMessage_TeMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::TestMessage_TeMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::main::TestMessage_TeMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::main::TestMessage_TeMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::main::TestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::main::TestMessage, _impl_.te_name_),
  PROTOBUF_FIELD_OFFSET(::main::TestMessage, _impl_.te_age_),
  PROTOBUF_FIELD_OFFSET(::main::TestMessage, _impl_.te_count_),
  PROTOBUF_FIELD_OFFSET(::main::TestMessage, _impl_.te_money_),
  PROTOBUF_FIELD_OFFSET(::main::TestMessage, _impl_.te_score_),
  PROTOBUF_FIELD_OFFSET(::main::TestMessage, _impl_.te_fat_),
  PROTOBUF_FIELD_OFFSET(::main::TestMessage, _impl_.te_char_),
  PROTOBUF_FIELD_OFFSET(::main::TestMessage, _impl_.childs_),
  PROTOBUF_FIELD_OFFSET(::main::TestMessage, _impl_.te_map_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::main::TestMessage_TeChild)},
  { 8, 16, -1, sizeof(::main::TestMessage_TeMapEntry_DoNotUse)},
  { 18, -1, -1, sizeof(::main::TestMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::main::_TestMessage_TeChild_default_instance_._instance,
  &::main::_TestMessage_TeMapEntry_DoNotUse_default_instance_._instance,
  &::main::_TestMessage_default_instance_._instance,
};

const char descriptor_table_protodef_proto3_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014proto3.proto\022\004main\"\324\002\n\013TestMessage\022\017\n\007"
  "te_name\030\001 \001(\t\022\016\n\006te_age\030\002 \001(\005\022\020\n\010te_coun"
  "t\030\003 \001(\005\022\020\n\010te_money\030\004 \001(\001\022\020\n\010te_score\030\005 "
  "\001(\002\022\016\n\006te_fat\030\006 \001(\010\022\017\n\007te_char\030\007 \001(\014\022)\n\006"
  "childs\030\t \001(\0132\031.main.TestMessage.TeChild\022"
  ",\n\006te_map\030\n \003(\0132\034.main.TestMessage.TeMap"
  "Entry\032*\n\007TeChild\022\017\n\007ch_name\030\001 \001(\t\022\016\n\006ch_"
  "sex\030\002 \001(\t\032,\n\nTeMapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\005:\0028\001\"\032\n\006Status\022\006\n\002OK\020\000\022\010\n\004FAI"
  "L\020\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_proto3_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto3_2eproto = {
    false, false, 371, descriptor_table_protodef_proto3_2eproto,
    "proto3.proto",
    &descriptor_table_proto3_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_proto3_2eproto::offsets,
    file_level_metadata_proto3_2eproto, file_level_enum_descriptors_proto3_2eproto,
    file_level_service_descriptors_proto3_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto3_2eproto_getter() {
  return &descriptor_table_proto3_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto3_2eproto(&descriptor_table_proto3_2eproto);
namespace main {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestMessage_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto3_2eproto);
  return file_level_enum_descriptors_proto3_2eproto[0];
}
bool TestMessage_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TestMessage_Status TestMessage::OK;
constexpr TestMessage_Status TestMessage::FAIL;
constexpr TestMessage_Status TestMessage::Status_MIN;
constexpr TestMessage_Status TestMessage::Status_MAX;
constexpr int TestMessage::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TestMessage_TeChild::_Internal {
 public:
};

TestMessage_TeChild::TestMessage_TeChild(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:main.TestMessage.TeChild)
}
TestMessage_TeChild::TestMessage_TeChild(const TestMessage_TeChild& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestMessage_TeChild* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ch_name_){}
    , decltype(_impl_.ch_sex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ch_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ch_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ch_name().empty()) {
    _this->_impl_.ch_name_.Set(from._internal_ch_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ch_sex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ch_sex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ch_sex().empty()) {
    _this->_impl_.ch_sex_.Set(from._internal_ch_sex(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:main.TestMessage.TeChild)
}

inline void TestMessage_TeChild::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ch_name_){}
    , decltype(_impl_.ch_sex_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ch_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ch_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ch_sex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ch_sex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestMessage_TeChild::~TestMessage_TeChild() {
  // @@protoc_insertion_point(destructor:main.TestMessage.TeChild)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMessage_TeChild::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ch_name_.Destroy();
  _impl_.ch_sex_.Destroy();
}

void TestMessage_TeChild::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestMessage_TeChild::Clear() {
// @@protoc_insertion_point(message_clear_start:main.TestMessage.TeChild)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ch_name_.ClearToEmpty();
  _impl_.ch_sex_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessage_TeChild::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ch_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ch_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "main.TestMessage.TeChild.ch_name"));
        } else
          goto handle_unusual;
        continue;
      // string ch_sex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ch_sex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "main.TestMessage.TeChild.ch_sex"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMessage_TeChild::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.TestMessage.TeChild)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ch_name = 1;
  if (!this->_internal_ch_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ch_name().data(), static_cast<int>(this->_internal_ch_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "main.TestMessage.TeChild.ch_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ch_name(), target);
  }

  // string ch_sex = 2;
  if (!this->_internal_ch_sex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ch_sex().data(), static_cast<int>(this->_internal_ch_sex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "main.TestMessage.TeChild.ch_sex");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ch_sex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.TestMessage.TeChild)
  return target;
}

size_t TestMessage_TeChild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.TestMessage.TeChild)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ch_name = 1;
  if (!this->_internal_ch_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ch_name());
  }

  // string ch_sex = 2;
  if (!this->_internal_ch_sex().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ch_sex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMessage_TeChild::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestMessage_TeChild::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMessage_TeChild::GetClassData() const { return &_class_data_; }


void TestMessage_TeChild::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestMessage_TeChild*>(&to_msg);
  auto& from = static_cast<const TestMessage_TeChild&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:main.TestMessage.TeChild)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ch_name().empty()) {
    _this->_internal_set_ch_name(from._internal_ch_name());
  }
  if (!from._internal_ch_sex().empty()) {
    _this->_internal_set_ch_sex(from._internal_ch_sex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMessage_TeChild::CopyFrom(const TestMessage_TeChild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.TestMessage.TeChild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage_TeChild::IsInitialized() const {
  return true;
}

void TestMessage_TeChild::InternalSwap(TestMessage_TeChild* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ch_name_, lhs_arena,
      &other->_impl_.ch_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ch_sex_, lhs_arena,
      &other->_impl_.ch_sex_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessage_TeChild::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto3_2eproto_getter, &descriptor_table_proto3_2eproto_once,
      file_level_metadata_proto3_2eproto[0]);
}

// ===================================================================

TestMessage_TeMapEntry_DoNotUse::TestMessage_TeMapEntry_DoNotUse() {}
TestMessage_TeMapEntry_DoNotUse::TestMessage_TeMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMessage_TeMapEntry_DoNotUse::MergeFrom(const TestMessage_TeMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMessage_TeMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto3_2eproto_getter, &descriptor_table_proto3_2eproto_once,
      file_level_metadata_proto3_2eproto[1]);
}

// ===================================================================

class TestMessage::_Internal {
 public:
  static const ::main::TestMessage_TeChild& childs(const TestMessage* msg);
};

const ::main::TestMessage_TeChild&
TestMessage::_Internal::childs(const TestMessage* msg) {
  return *msg->_impl_.childs_;
}
TestMessage::TestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TestMessage::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:main.TestMessage)
}
TestMessage::TestMessage(const TestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.te_map_)*/{}
    , decltype(_impl_.te_name_){}
    , decltype(_impl_.te_char_){}
    , decltype(_impl_.childs_){nullptr}
    , decltype(_impl_.te_age_){}
    , decltype(_impl_.te_count_){}
    , decltype(_impl_.te_money_){}
    , decltype(_impl_.te_score_){}
    , decltype(_impl_.te_fat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.te_map_.MergeFrom(from._impl_.te_map_);
  _impl_.te_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.te_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_te_name().empty()) {
    _this->_impl_.te_name_.Set(from._internal_te_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.te_char_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.te_char_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_te_char().empty()) {
    _this->_impl_.te_char_.Set(from._internal_te_char(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_childs()) {
    _this->_impl_.childs_ = new ::main::TestMessage_TeChild(*from._impl_.childs_);
  }
  ::memcpy(&_impl_.te_age_, &from._impl_.te_age_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.te_fat_) -
    reinterpret_cast<char*>(&_impl_.te_age_)) + sizeof(_impl_.te_fat_));
  // @@protoc_insertion_point(copy_constructor:main.TestMessage)
}

inline void TestMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.te_map_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.te_name_){}
    , decltype(_impl_.te_char_){}
    , decltype(_impl_.childs_){nullptr}
    , decltype(_impl_.te_age_){0}
    , decltype(_impl_.te_count_){0}
    , decltype(_impl_.te_money_){0}
    , decltype(_impl_.te_score_){0}
    , decltype(_impl_.te_fat_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.te_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.te_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.te_char_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.te_char_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestMessage::~TestMessage() {
  // @@protoc_insertion_point(destructor:main.TestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.te_map_.Destruct();
  _impl_.te_map_.~MapField();
  _impl_.te_name_.Destroy();
  _impl_.te_char_.Destroy();
  if (this != internal_default_instance()) delete _impl_.childs_;
}

void TestMessage::ArenaDtor(void* object) {
  TestMessage* _this = reinterpret_cast< TestMessage* >(object);
  _this->_impl_.te_map_.Destruct();
}
void TestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:main.TestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.te_map_.Clear();
  _impl_.te_name_.ClearToEmpty();
  _impl_.te_char_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.childs_ != nullptr) {
    delete _impl_.childs_;
  }
  _impl_.childs_ = nullptr;
  ::memset(&_impl_.te_age_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.te_fat_) -
      reinterpret_cast<char*>(&_impl_.te_age_)) + sizeof(_impl_.te_fat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string te_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_te_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "main.TestMessage.te_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 te_age = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.te_age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 te_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.te_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double te_money = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.te_money_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float te_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.te_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool te_fat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.te_fat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes te_char = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_te_char();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .main.TestMessage.TeChild childs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_childs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> te_map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.te_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.TestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string te_name = 1;
  if (!this->_internal_te_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_te_name().data(), static_cast<int>(this->_internal_te_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "main.TestMessage.te_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_te_name(), target);
  }

  // int32 te_age = 2;
  if (this->_internal_te_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_te_age(), target);
  }

  // int32 te_count = 3;
  if (this->_internal_te_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_te_count(), target);
  }

  // double te_money = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_te_money = this->_internal_te_money();
  uint64_t raw_te_money;
  memcpy(&raw_te_money, &tmp_te_money, sizeof(tmp_te_money));
  if (raw_te_money != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_te_money(), target);
  }

  // float te_score = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_te_score = this->_internal_te_score();
  uint32_t raw_te_score;
  memcpy(&raw_te_score, &tmp_te_score, sizeof(tmp_te_score));
  if (raw_te_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_te_score(), target);
  }

  // bool te_fat = 6;
  if (this->_internal_te_fat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_te_fat(), target);
  }

  // bytes te_char = 7;
  if (!this->_internal_te_char().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_te_char(), target);
  }

  // .main.TestMessage.TeChild childs = 9;
  if (this->_internal_has_childs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::childs(this),
        _Internal::childs(this).GetCachedSize(), target, stream);
  }

  // map<string, int32> te_map = 10;
  if (!this->_internal_te_map().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = TestMessage_TeMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_te_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "main.TestMessage.TeMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.TestMessage)
  return target;
}

size_t TestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.TestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> te_map = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_te_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_te_map().begin();
      it != this->_internal_te_map().end(); ++it) {
    total_size += TestMessage_TeMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string te_name = 1;
  if (!this->_internal_te_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_te_name());
  }

  // bytes te_char = 7;
  if (!this->_internal_te_char().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_te_char());
  }

  // .main.TestMessage.TeChild childs = 9;
  if (this->_internal_has_childs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.childs_);
  }

  // int32 te_age = 2;
  if (this->_internal_te_age() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_te_age());
  }

  // int32 te_count = 3;
  if (this->_internal_te_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_te_count());
  }

  // double te_money = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_te_money = this->_internal_te_money();
  uint64_t raw_te_money;
  memcpy(&raw_te_money, &tmp_te_money, sizeof(tmp_te_money));
  if (raw_te_money != 0) {
    total_size += 1 + 8;
  }

  // float te_score = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_te_score = this->_internal_te_score();
  uint32_t raw_te_score;
  memcpy(&raw_te_score, &tmp_te_score, sizeof(tmp_te_score));
  if (raw_te_score != 0) {
    total_size += 1 + 4;
  }

  // bool te_fat = 6;
  if (this->_internal_te_fat() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMessage::GetClassData() const { return &_class_data_; }


void TestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestMessage*>(&to_msg);
  auto& from = static_cast<const TestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:main.TestMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.te_map_.MergeFrom(from._impl_.te_map_);
  if (!from._internal_te_name().empty()) {
    _this->_internal_set_te_name(from._internal_te_name());
  }
  if (!from._internal_te_char().empty()) {
    _this->_internal_set_te_char(from._internal_te_char());
  }
  if (from._internal_has_childs()) {
    _this->_internal_mutable_childs()->::main::TestMessage_TeChild::MergeFrom(
        from._internal_childs());
  }
  if (from._internal_te_age() != 0) {
    _this->_internal_set_te_age(from._internal_te_age());
  }
  if (from._internal_te_count() != 0) {
    _this->_internal_set_te_count(from._internal_te_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_te_money = from._internal_te_money();
  uint64_t raw_te_money;
  memcpy(&raw_te_money, &tmp_te_money, sizeof(tmp_te_money));
  if (raw_te_money != 0) {
    _this->_internal_set_te_money(from._internal_te_money());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_te_score = from._internal_te_score();
  uint32_t raw_te_score;
  memcpy(&raw_te_score, &tmp_te_score, sizeof(tmp_te_score));
  if (raw_te_score != 0) {
    _this->_internal_set_te_score(from._internal_te_score());
  }
  if (from._internal_te_fat() != 0) {
    _this->_internal_set_te_fat(from._internal_te_fat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMessage::CopyFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage::IsInitialized() const {
  return true;
}

void TestMessage::InternalSwap(TestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.te_map_.InternalSwap(&other->_impl_.te_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.te_name_, lhs_arena,
      &other->_impl_.te_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.te_char_, lhs_arena,
      &other->_impl_.te_char_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.te_fat_)
      + sizeof(TestMessage::_impl_.te_fat_)
      - PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.childs_)>(
          reinterpret_cast<char*>(&_impl_.childs_),
          reinterpret_cast<char*>(&other->_impl_.childs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto3_2eproto_getter, &descriptor_table_proto3_2eproto_once,
      file_level_metadata_proto3_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace main
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::main::TestMessage_TeChild*
Arena::CreateMaybeMessage< ::main::TestMessage_TeChild >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::TestMessage_TeChild >(arena);
}
template<> PROTOBUF_NOINLINE ::main::TestMessage_TeMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::main::TestMessage_TeMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::TestMessage_TeMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::main::TestMessage*
Arena::CreateMaybeMessage< ::main::TestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::TestMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
