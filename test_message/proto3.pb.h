// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto3.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto3_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto3_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto3_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto3_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto3_2eproto;
namespace main {
class TestMessage;
struct TestMessageDefaultTypeInternal;
extern TestMessageDefaultTypeInternal _TestMessage_default_instance_;
class TestMessage_TeChild;
struct TestMessage_TeChildDefaultTypeInternal;
extern TestMessage_TeChildDefaultTypeInternal _TestMessage_TeChild_default_instance_;
class TestMessage_TeMapEntry_DoNotUse;
struct TestMessage_TeMapEntry_DoNotUseDefaultTypeInternal;
extern TestMessage_TeMapEntry_DoNotUseDefaultTypeInternal _TestMessage_TeMapEntry_DoNotUse_default_instance_;
}  // namespace main
PROTOBUF_NAMESPACE_OPEN
template<> ::main::TestMessage* Arena::CreateMaybeMessage<::main::TestMessage>(Arena*);
template<> ::main::TestMessage_TeChild* Arena::CreateMaybeMessage<::main::TestMessage_TeChild>(Arena*);
template<> ::main::TestMessage_TeMapEntry_DoNotUse* Arena::CreateMaybeMessage<::main::TestMessage_TeMapEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace main {

enum TestMessage_Status : int {
  TestMessage_Status_OK = 0,
  TestMessage_Status_FAIL = 1,
  TestMessage_Status_TestMessage_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TestMessage_Status_TestMessage_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TestMessage_Status_IsValid(int value);
constexpr TestMessage_Status TestMessage_Status_Status_MIN = TestMessage_Status_OK;
constexpr TestMessage_Status TestMessage_Status_Status_MAX = TestMessage_Status_FAIL;
constexpr int TestMessage_Status_Status_ARRAYSIZE = TestMessage_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestMessage_Status_descriptor();
template<typename T>
inline const std::string& TestMessage_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestMessage_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestMessage_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestMessage_Status_descriptor(), enum_t_value);
}
inline bool TestMessage_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TestMessage_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestMessage_Status>(
    TestMessage_Status_descriptor(), name, value);
}
// ===================================================================

class TestMessage_TeChild final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.TestMessage.TeChild) */ {
 public:
  inline TestMessage_TeChild() : TestMessage_TeChild(nullptr) {}
  ~TestMessage_TeChild() override;
  explicit PROTOBUF_CONSTEXPR TestMessage_TeChild(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMessage_TeChild(const TestMessage_TeChild& from);
  TestMessage_TeChild(TestMessage_TeChild&& from) noexcept
    : TestMessage_TeChild() {
    *this = ::std::move(from);
  }

  inline TestMessage_TeChild& operator=(const TestMessage_TeChild& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage_TeChild& operator=(TestMessage_TeChild&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMessage_TeChild& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMessage_TeChild* internal_default_instance() {
    return reinterpret_cast<const TestMessage_TeChild*>(
               &_TestMessage_TeChild_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestMessage_TeChild& a, TestMessage_TeChild& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessage_TeChild* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage_TeChild* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMessage_TeChild* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMessage_TeChild>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMessage_TeChild& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestMessage_TeChild& from) {
    TestMessage_TeChild::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessage_TeChild* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.TestMessage.TeChild";
  }
  protected:
  explicit TestMessage_TeChild(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChNameFieldNumber = 1,
    kChSexFieldNumber = 2,
  };
  // string ch_name = 1;
  void clear_ch_name();
  const std::string& ch_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ch_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ch_name();
  PROTOBUF_NODISCARD std::string* release_ch_name();
  void set_allocated_ch_name(std::string* ch_name);
  private:
  const std::string& _internal_ch_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ch_name(const std::string& value);
  std::string* _internal_mutable_ch_name();
  public:

  // string ch_sex = 2;
  void clear_ch_sex();
  const std::string& ch_sex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ch_sex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ch_sex();
  PROTOBUF_NODISCARD std::string* release_ch_sex();
  void set_allocated_ch_sex(std::string* ch_sex);
  private:
  const std::string& _internal_ch_sex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ch_sex(const std::string& value);
  std::string* _internal_mutable_ch_sex();
  public:

  // @@protoc_insertion_point(class_scope:main.TestMessage.TeChild)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ch_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ch_sex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto3_2eproto;
};
// -------------------------------------------------------------------

class TestMessage_TeMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestMessage_TeMapEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestMessage_TeMapEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  TestMessage_TeMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestMessage_TeMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestMessage_TeMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestMessage_TeMapEntry_DoNotUse& other);
  static const TestMessage_TeMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestMessage_TeMapEntry_DoNotUse*>(&_TestMessage_TeMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "main.TestMessage.TeMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_proto3_2eproto;
};

// -------------------------------------------------------------------

class TestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.TestMessage) */ {
 public:
  inline TestMessage() : TestMessage(nullptr) {}
  ~TestMessage() override;
  explicit PROTOBUF_CONSTEXPR TestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMessage(const TestMessage& from);
  TestMessage(TestMessage&& from) noexcept
    : TestMessage() {
    *this = ::std::move(from);
  }

  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage& operator=(TestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMessage* internal_default_instance() {
    return reinterpret_cast<const TestMessage*>(
               &_TestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestMessage& a, TestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestMessage& from) {
    TestMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.TestMessage";
  }
  protected:
  explicit TestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestMessage_TeChild TeChild;

  typedef TestMessage_Status Status;
  static constexpr Status OK =
    TestMessage_Status_OK;
  static constexpr Status FAIL =
    TestMessage_Status_FAIL;
  static inline bool Status_IsValid(int value) {
    return TestMessage_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    TestMessage_Status_Status_MIN;
  static constexpr Status Status_MAX =
    TestMessage_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    TestMessage_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return TestMessage_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return TestMessage_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return TestMessage_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTeMapFieldNumber = 10,
    kTeNameFieldNumber = 1,
    kTeCharFieldNumber = 7,
    kChildsFieldNumber = 9,
    kTeAgeFieldNumber = 2,
    kTeCountFieldNumber = 3,
    kTeMoneyFieldNumber = 4,
    kTeScoreFieldNumber = 5,
    kTeFatFieldNumber = 6,
  };
  // map<string, int32> te_map = 10;
  int te_map_size() const;
  private:
  int _internal_te_map_size() const;
  public:
  void clear_te_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_te_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_te_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      te_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_te_map();

  // string te_name = 1;
  void clear_te_name();
  const std::string& te_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_te_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_te_name();
  PROTOBUF_NODISCARD std::string* release_te_name();
  void set_allocated_te_name(std::string* te_name);
  private:
  const std::string& _internal_te_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_te_name(const std::string& value);
  std::string* _internal_mutable_te_name();
  public:

  // bytes te_char = 7;
  void clear_te_char();
  const std::string& te_char() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_te_char(ArgT0&& arg0, ArgT... args);
  std::string* mutable_te_char();
  PROTOBUF_NODISCARD std::string* release_te_char();
  void set_allocated_te_char(std::string* te_char);
  private:
  const std::string& _internal_te_char() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_te_char(const std::string& value);
  std::string* _internal_mutable_te_char();
  public:

  // .main.TestMessage.TeChild childs = 9;
  bool has_childs() const;
  private:
  bool _internal_has_childs() const;
  public:
  void clear_childs();
  const ::main::TestMessage_TeChild& childs() const;
  PROTOBUF_NODISCARD ::main::TestMessage_TeChild* release_childs();
  ::main::TestMessage_TeChild* mutable_childs();
  void set_allocated_childs(::main::TestMessage_TeChild* childs);
  private:
  const ::main::TestMessage_TeChild& _internal_childs() const;
  ::main::TestMessage_TeChild* _internal_mutable_childs();
  public:
  void unsafe_arena_set_allocated_childs(
      ::main::TestMessage_TeChild* childs);
  ::main::TestMessage_TeChild* unsafe_arena_release_childs();

  // int32 te_age = 2;
  void clear_te_age();
  int32_t te_age() const;
  void set_te_age(int32_t value);
  private:
  int32_t _internal_te_age() const;
  void _internal_set_te_age(int32_t value);
  public:

  // int32 te_count = 3;
  void clear_te_count();
  int32_t te_count() const;
  void set_te_count(int32_t value);
  private:
  int32_t _internal_te_count() const;
  void _internal_set_te_count(int32_t value);
  public:

  // double te_money = 4;
  void clear_te_money();
  double te_money() const;
  void set_te_money(double value);
  private:
  double _internal_te_money() const;
  void _internal_set_te_money(double value);
  public:

  // float te_score = 5;
  void clear_te_score();
  float te_score() const;
  void set_te_score(float value);
  private:
  float _internal_te_score() const;
  void _internal_set_te_score(float value);
  public:

  // bool te_fat = 6;
  void clear_te_fat();
  bool te_fat() const;
  void set_te_fat(bool value);
  private:
  bool _internal_te_fat() const;
  void _internal_set_te_fat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:main.TestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestMessage_TeMapEntry_DoNotUse,
        std::string, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> te_map_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr te_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr te_char_;
    ::main::TestMessage_TeChild* childs_;
    int32_t te_age_;
    int32_t te_count_;
    double te_money_;
    float te_score_;
    bool te_fat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto3_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestMessage_TeChild

// string ch_name = 1;
inline void TestMessage_TeChild::clear_ch_name() {
  _impl_.ch_name_.ClearToEmpty();
}
inline const std::string& TestMessage_TeChild::ch_name() const {
  // @@protoc_insertion_point(field_get:main.TestMessage.TeChild.ch_name)
  return _internal_ch_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestMessage_TeChild::set_ch_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ch_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:main.TestMessage.TeChild.ch_name)
}
inline std::string* TestMessage_TeChild::mutable_ch_name() {
  std::string* _s = _internal_mutable_ch_name();
  // @@protoc_insertion_point(field_mutable:main.TestMessage.TeChild.ch_name)
  return _s;
}
inline const std::string& TestMessage_TeChild::_internal_ch_name() const {
  return _impl_.ch_name_.Get();
}
inline void TestMessage_TeChild::_internal_set_ch_name(const std::string& value) {
  
  _impl_.ch_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TestMessage_TeChild::_internal_mutable_ch_name() {
  
  return _impl_.ch_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TestMessage_TeChild::release_ch_name() {
  // @@protoc_insertion_point(field_release:main.TestMessage.TeChild.ch_name)
  return _impl_.ch_name_.Release();
}
inline void TestMessage_TeChild::set_allocated_ch_name(std::string* ch_name) {
  if (ch_name != nullptr) {
    
  } else {
    
  }
  _impl_.ch_name_.SetAllocated(ch_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ch_name_.IsDefault()) {
    _impl_.ch_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:main.TestMessage.TeChild.ch_name)
}

// string ch_sex = 2;
inline void TestMessage_TeChild::clear_ch_sex() {
  _impl_.ch_sex_.ClearToEmpty();
}
inline const std::string& TestMessage_TeChild::ch_sex() const {
  // @@protoc_insertion_point(field_get:main.TestMessage.TeChild.ch_sex)
  return _internal_ch_sex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestMessage_TeChild::set_ch_sex(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ch_sex_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:main.TestMessage.TeChild.ch_sex)
}
inline std::string* TestMessage_TeChild::mutable_ch_sex() {
  std::string* _s = _internal_mutable_ch_sex();
  // @@protoc_insertion_point(field_mutable:main.TestMessage.TeChild.ch_sex)
  return _s;
}
inline const std::string& TestMessage_TeChild::_internal_ch_sex() const {
  return _impl_.ch_sex_.Get();
}
inline void TestMessage_TeChild::_internal_set_ch_sex(const std::string& value) {
  
  _impl_.ch_sex_.Set(value, GetArenaForAllocation());
}
inline std::string* TestMessage_TeChild::_internal_mutable_ch_sex() {
  
  return _impl_.ch_sex_.Mutable(GetArenaForAllocation());
}
inline std::string* TestMessage_TeChild::release_ch_sex() {
  // @@protoc_insertion_point(field_release:main.TestMessage.TeChild.ch_sex)
  return _impl_.ch_sex_.Release();
}
inline void TestMessage_TeChild::set_allocated_ch_sex(std::string* ch_sex) {
  if (ch_sex != nullptr) {
    
  } else {
    
  }
  _impl_.ch_sex_.SetAllocated(ch_sex, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ch_sex_.IsDefault()) {
    _impl_.ch_sex_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:main.TestMessage.TeChild.ch_sex)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TestMessage

// string te_name = 1;
inline void TestMessage::clear_te_name() {
  _impl_.te_name_.ClearToEmpty();
}
inline const std::string& TestMessage::te_name() const {
  // @@protoc_insertion_point(field_get:main.TestMessage.te_name)
  return _internal_te_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestMessage::set_te_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.te_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:main.TestMessage.te_name)
}
inline std::string* TestMessage::mutable_te_name() {
  std::string* _s = _internal_mutable_te_name();
  // @@protoc_insertion_point(field_mutable:main.TestMessage.te_name)
  return _s;
}
inline const std::string& TestMessage::_internal_te_name() const {
  return _impl_.te_name_.Get();
}
inline void TestMessage::_internal_set_te_name(const std::string& value) {
  
  _impl_.te_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TestMessage::_internal_mutable_te_name() {
  
  return _impl_.te_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TestMessage::release_te_name() {
  // @@protoc_insertion_point(field_release:main.TestMessage.te_name)
  return _impl_.te_name_.Release();
}
inline void TestMessage::set_allocated_te_name(std::string* te_name) {
  if (te_name != nullptr) {
    
  } else {
    
  }
  _impl_.te_name_.SetAllocated(te_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.te_name_.IsDefault()) {
    _impl_.te_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:main.TestMessage.te_name)
}

// int32 te_age = 2;
inline void TestMessage::clear_te_age() {
  _impl_.te_age_ = 0;
}
inline int32_t TestMessage::_internal_te_age() const {
  return _impl_.te_age_;
}
inline int32_t TestMessage::te_age() const {
  // @@protoc_insertion_point(field_get:main.TestMessage.te_age)
  return _internal_te_age();
}
inline void TestMessage::_internal_set_te_age(int32_t value) {
  
  _impl_.te_age_ = value;
}
inline void TestMessage::set_te_age(int32_t value) {
  _internal_set_te_age(value);
  // @@protoc_insertion_point(field_set:main.TestMessage.te_age)
}

// int32 te_count = 3;
inline void TestMessage::clear_te_count() {
  _impl_.te_count_ = 0;
}
inline int32_t TestMessage::_internal_te_count() const {
  return _impl_.te_count_;
}
inline int32_t TestMessage::te_count() const {
  // @@protoc_insertion_point(field_get:main.TestMessage.te_count)
  return _internal_te_count();
}
inline void TestMessage::_internal_set_te_count(int32_t value) {
  
  _impl_.te_count_ = value;
}
inline void TestMessage::set_te_count(int32_t value) {
  _internal_set_te_count(value);
  // @@protoc_insertion_point(field_set:main.TestMessage.te_count)
}

// double te_money = 4;
inline void TestMessage::clear_te_money() {
  _impl_.te_money_ = 0;
}
inline double TestMessage::_internal_te_money() const {
  return _impl_.te_money_;
}
inline double TestMessage::te_money() const {
  // @@protoc_insertion_point(field_get:main.TestMessage.te_money)
  return _internal_te_money();
}
inline void TestMessage::_internal_set_te_money(double value) {
  
  _impl_.te_money_ = value;
}
inline void TestMessage::set_te_money(double value) {
  _internal_set_te_money(value);
  // @@protoc_insertion_point(field_set:main.TestMessage.te_money)
}

// float te_score = 5;
inline void TestMessage::clear_te_score() {
  _impl_.te_score_ = 0;
}
inline float TestMessage::_internal_te_score() const {
  return _impl_.te_score_;
}
inline float TestMessage::te_score() const {
  // @@protoc_insertion_point(field_get:main.TestMessage.te_score)
  return _internal_te_score();
}
inline void TestMessage::_internal_set_te_score(float value) {
  
  _impl_.te_score_ = value;
}
inline void TestMessage::set_te_score(float value) {
  _internal_set_te_score(value);
  // @@protoc_insertion_point(field_set:main.TestMessage.te_score)
}

// bool te_fat = 6;
inline void TestMessage::clear_te_fat() {
  _impl_.te_fat_ = false;
}
inline bool TestMessage::_internal_te_fat() const {
  return _impl_.te_fat_;
}
inline bool TestMessage::te_fat() const {
  // @@protoc_insertion_point(field_get:main.TestMessage.te_fat)
  return _internal_te_fat();
}
inline void TestMessage::_internal_set_te_fat(bool value) {
  
  _impl_.te_fat_ = value;
}
inline void TestMessage::set_te_fat(bool value) {
  _internal_set_te_fat(value);
  // @@protoc_insertion_point(field_set:main.TestMessage.te_fat)
}

// bytes te_char = 7;
inline void TestMessage::clear_te_char() {
  _impl_.te_char_.ClearToEmpty();
}
inline const std::string& TestMessage::te_char() const {
  // @@protoc_insertion_point(field_get:main.TestMessage.te_char)
  return _internal_te_char();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestMessage::set_te_char(ArgT0&& arg0, ArgT... args) {
 
 _impl_.te_char_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:main.TestMessage.te_char)
}
inline std::string* TestMessage::mutable_te_char() {
  std::string* _s = _internal_mutable_te_char();
  // @@protoc_insertion_point(field_mutable:main.TestMessage.te_char)
  return _s;
}
inline const std::string& TestMessage::_internal_te_char() const {
  return _impl_.te_char_.Get();
}
inline void TestMessage::_internal_set_te_char(const std::string& value) {
  
  _impl_.te_char_.Set(value, GetArenaForAllocation());
}
inline std::string* TestMessage::_internal_mutable_te_char() {
  
  return _impl_.te_char_.Mutable(GetArenaForAllocation());
}
inline std::string* TestMessage::release_te_char() {
  // @@protoc_insertion_point(field_release:main.TestMessage.te_char)
  return _impl_.te_char_.Release();
}
inline void TestMessage::set_allocated_te_char(std::string* te_char) {
  if (te_char != nullptr) {
    
  } else {
    
  }
  _impl_.te_char_.SetAllocated(te_char, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.te_char_.IsDefault()) {
    _impl_.te_char_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:main.TestMessage.te_char)
}

// .main.TestMessage.TeChild childs = 9;
inline bool TestMessage::_internal_has_childs() const {
  return this != internal_default_instance() && _impl_.childs_ != nullptr;
}
inline bool TestMessage::has_childs() const {
  return _internal_has_childs();
}
inline void TestMessage::clear_childs() {
  if (GetArenaForAllocation() == nullptr && _impl_.childs_ != nullptr) {
    delete _impl_.childs_;
  }
  _impl_.childs_ = nullptr;
}
inline const ::main::TestMessage_TeChild& TestMessage::_internal_childs() const {
  const ::main::TestMessage_TeChild* p = _impl_.childs_;
  return p != nullptr ? *p : reinterpret_cast<const ::main::TestMessage_TeChild&>(
      ::main::_TestMessage_TeChild_default_instance_);
}
inline const ::main::TestMessage_TeChild& TestMessage::childs() const {
  // @@protoc_insertion_point(field_get:main.TestMessage.childs)
  return _internal_childs();
}
inline void TestMessage::unsafe_arena_set_allocated_childs(
    ::main::TestMessage_TeChild* childs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childs_);
  }
  _impl_.childs_ = childs;
  if (childs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:main.TestMessage.childs)
}
inline ::main::TestMessage_TeChild* TestMessage::release_childs() {
  
  ::main::TestMessage_TeChild* temp = _impl_.childs_;
  _impl_.childs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::main::TestMessage_TeChild* TestMessage::unsafe_arena_release_childs() {
  // @@protoc_insertion_point(field_release:main.TestMessage.childs)
  
  ::main::TestMessage_TeChild* temp = _impl_.childs_;
  _impl_.childs_ = nullptr;
  return temp;
}
inline ::main::TestMessage_TeChild* TestMessage::_internal_mutable_childs() {
  
  if (_impl_.childs_ == nullptr) {
    auto* p = CreateMaybeMessage<::main::TestMessage_TeChild>(GetArenaForAllocation());
    _impl_.childs_ = p;
  }
  return _impl_.childs_;
}
inline ::main::TestMessage_TeChild* TestMessage::mutable_childs() {
  ::main::TestMessage_TeChild* _msg = _internal_mutable_childs();
  // @@protoc_insertion_point(field_mutable:main.TestMessage.childs)
  return _msg;
}
inline void TestMessage::set_allocated_childs(::main::TestMessage_TeChild* childs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.childs_;
  }
  if (childs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(childs);
    if (message_arena != submessage_arena) {
      childs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, childs, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.childs_ = childs;
  // @@protoc_insertion_point(field_set_allocated:main.TestMessage.childs)
}

// map<string, int32> te_map = 10;
inline int TestMessage::_internal_te_map_size() const {
  return _impl_.te_map_.size();
}
inline int TestMessage::te_map_size() const {
  return _internal_te_map_size();
}
inline void TestMessage::clear_te_map() {
  _impl_.te_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
TestMessage::_internal_te_map() const {
  return _impl_.te_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
TestMessage::te_map() const {
  // @@protoc_insertion_point(field_map:main.TestMessage.te_map)
  return _internal_te_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
TestMessage::_internal_mutable_te_map() {
  return _impl_.te_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
TestMessage::mutable_te_map() {
  // @@protoc_insertion_point(field_mutable_map:main.TestMessage.te_map)
  return _internal_mutable_te_map();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::main::TestMessage_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::main::TestMessage_Status>() {
  return ::main::TestMessage_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto3_2eproto
